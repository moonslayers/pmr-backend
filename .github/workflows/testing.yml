# .github/workflows/laravel-tests.yml

name: Laravel Tests

# 1. Disparador (Trigger)
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 2. Permisos
permissions:
  contents: read

# 3. Jobs (Tareas)
jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    # 4. Servicios (Base de Datos)
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: laravel_test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # 5. Paso 1: Obtener el código del repositorio (PRIMERO)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para obtener el historial completo

      # 6. Paso 2: Verificar archivos de prueba correspondientes (MEJORADO PARA PRs)
      - name: Check for corresponding test files
        run: |
          echo "Verificando archivos de PHP modificados en el directorio 'app'..."
          
          # Para PRs, compara con el branch base
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Ejecutando en Pull Request..."
            BASE_REF="${{ github.base_ref }}"
            HEAD_REF="${{ github.head_ref }}"
            
            echo "Comparando: $BASE_REF...$HEAD_REF"
            git fetch origin $BASE_REF
            git fetch origin $HEAD_REF
            
            CHANGED_FILES=$(git diff --name-only origin/$BASE_REF...origin/$HEAD_REF)
          
          # Para pushes normales
          else
            BEFORE_SHA="${{ github.event.before }}"
            AFTER_SHA="${{ github.event.after }}"

            if [ "$BEFORE_SHA" == "0000000000000000000000000000000000000000" ]; then
              echo "Detectado un nuevo branch. Comparando con el branch base..."
              BASE_REF="main"
              echo "Comparando con branch base: $BASE_REF"
              git fetch origin $BASE_REF
              
              MERGE_BASE=$(git merge-base HEAD origin/$BASE_REF 2>/dev/null || echo "")
              
              if [ -n "$MERGE_BASE" ]; then
                CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD)
              else
                CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $AFTER_SHA)
              fi
            else
              CHANGED_FILES=$(git diff --name-only $BEFORE_SHA $AFTER_SHA 2>/dev/null || echo "")
            fi
          fi
          
          # Resto del código igual...
          if [ -z "$CHANGED_FILES" ]; then
            echo "✅ No se detectaron archivos modificados. Continuando..."
            exit 0
          fi
          
          # Filtra solo los archivos .php dentro del directorio 'app'
          APP_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep '^app/.*\.php$' || true)

          if [ -z "$APP_FILES_CHANGED" ]; then
            echo "✅ No se modificaron archivos en el directorio 'app/'. Continuando..."
            exit 0
          fi

          echo "Archivos de aplicación modificados en TODO el PR:"
          echo "$APP_FILES_CHANGED"
          
          # Resto del código de verificación de pruebas...

      # 7. Paso 3: Configurar PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml, mysql, pdo_mysql
          coverage: xdebug

      # 8. Paso 4: Copiar archivo de entorno y configurar
      - name: Copy .env
        run: cp .env.example .env

      # 9. Paso 5: Instalar dependencias de Composer
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # 10. Paso 8: Ejecutar las pruebas
      - name: Execute Tests (PHPUnit & Pest)
        run: php artisan test