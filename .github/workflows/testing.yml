# .github/workflows/laravel-tests.yml

name: Laravel Tests

# 1. Disparador (Trigger)
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 2. Permisos
permissions:
  contents: read

# 3. Jobs (Tareas)
jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    # 4. Servicios (Base de Datos)
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: laravel_test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # 5. Paso 1: Obtener el c√≥digo del repositorio (PRIMERO)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para obtener el historial completo

      # 6. Paso 2: Verificar archivos de prueba correspondientes (MEJORADO PARA PRs)
      - name: Check for corresponding test files
        run: |
          echo "Verificando archivos de PHP modificados en el directorio 'app'..."
          
          # Para PRs, compara con el branch base
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Ejecutando en Pull Request..."
            BASE_REF="${{ github.base_ref }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            
            echo "Comparando base: $BASE_REF con HEAD: $HEAD_SHA"
            git fetch origin $BASE_REF
            
            CHANGED_FILES=$(git diff --name-only origin/$BASE_REF...$HEAD_SHA)
          
          # Para pushes normales
          else
            BEFORE_SHA="${{ github.event.before }}"
            AFTER_SHA="${{ github.event.after }}"

            if [ "$BEFORE_SHA" == "0000000000000000000000000000000000000000" ]; then
              echo "Detectado un nuevo branch. Comparando con el branch base..."
              BASE_REF="main"
              echo "Comparando con branch base: $BASE_REF"
              git fetch origin $BASE_REF
              
              MERGE_BASE=$(git merge-base HEAD origin/$BASE_REF 2>/dev/null || echo "")
              
              if [ -n "$MERGE_BASE" ]; then
                CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD)
              else
                CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $AFTER_SHA)
              fi
            else
              CHANGED_FILES=$(git diff --name-only $BEFORE_SHA $AFTER_SHA 2>/dev/null || echo "")
            fi
          fi
          
          # Si no hay cambios detectados, salir exitosamente
          if [ -z "$CHANGED_FILES" ]; then
            echo "‚úÖ No se detectaron archivos modificados. Continuando..."
            exit 0
          fi
          
          # Filtra solo los archivos .php dentro del directorio 'app'
          APP_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep '^app/.*\.php$' || true)

          if [ -z "$APP_FILES_CHANGED" ]; then
            echo "‚úÖ No se modificaron archivos en el directorio 'app/'. Continuando..."
            exit 0
          fi

          echo "Archivos de aplicaci√≥n modificados:"
          echo "$APP_FILES_CHANGED"
          
          FAILED=false
          for file in $APP_FILES_CHANGED; do
            # Ignora si el archivo fue eliminado
            if [ ! -f "$file" ]; then
              echo "‚ÑπÔ∏è El archivo '$file' fue eliminado. Omitiendo verificaci√≥n."
              continue
            fi

            # Extrae el nombre base del archivo sin extensi√≥n
            FILENAME=$(basename "$file" .php)
            
            # Busca pruebas que coincidan con el nombre del archivo
            UNIT_TEST_EXACT="tests/Unit/${FILENAME}Test.php"
            FEATURE_TEST_EXACT="tests/Feature/${FILENAME}Test.php"
            
            # Si es un Controller, tambi√©n busca sin la palabra "Controller"
            if [[ $FILENAME == *"Controller" ]]; then
              CLASS_NAME=${FILENAME%Controller}
              UNIT_TEST_SIMPLE="tests/Unit/${CLASS_NAME}Test.php"
              FEATURE_TEST_SIMPLE="tests/Feature/${CLASS_NAME}Test.php"
            else
              UNIT_TEST_SIMPLE=""
              FEATURE_TEST_SIMPLE=""
            fi
            
            # Verifica si existe alguna prueba v√°lida
            TEST_FOUND=false
            
            if [ -f "$UNIT_TEST_EXACT" ]; then
              echo "‚úÖ Encontrada prueba Unitaria exacta para '$file' en '$UNIT_TEST_EXACT'"
              TEST_FOUND=true
            elif [ -f "$FEATURE_TEST_EXACT" ]; then
              echo "‚úÖ Encontrada prueba de Feature exacta para '$file' en '$FEATURE_TEST_EXACT'"
              TEST_FOUND=true
            elif [ -n "$UNIT_TEST_SIMPLE" ] && [ -f "$UNIT_TEST_SIMPLE" ]; then
              echo "‚úÖ Encontrada prueba Unitaria simplificada para '$file' en '$UNIT_TEST_SIMPLE'"
              TEST_FOUND=true
            elif [ -n "$FEATURE_TEST_SIMPLE" ] && [ -f "$FEATURE_TEST_SIMPLE" ]; then
              echo "‚úÖ Encontrada prueba de Feature simplificada para '$file' en '$FEATURE_TEST_SIMPLE'"
              TEST_FOUND=true
            else
              # B√∫squeda m√°s flexible
              echo "üîç B√∫squeda flexible para '$FILENAME'..."
              FLEXIBLE_UNIT_TEST=$(find tests/Unit -name "*${FILENAME}*Test.php" -type f | head -1)
              FLEXIBLE_FEATURE_TEST=$(find tests/Feature -name "*${FILENAME}*Test.php" -type f | head -1)
              
              if [ -n "$FLEXIBLE_UNIT_TEST" ]; then
                echo "‚úÖ Encontrada prueba Unitaria flexible para '$file' en '$FLEXIBLE_UNIT_TEST'"
                TEST_FOUND=true
              elif [ -n "$FLEXIBLE_FEATURE_TEST" ]; then
                echo "‚úÖ Encontrada prueba de Feature flexible para '$file' en '$FLEXIBLE_FEATURE_TEST'"
                TEST_FOUND=true
              fi
            fi

            if [ "$TEST_FOUND" = false ]; then
              echo "‚ùå ERROR: No se encontr√≥ un archivo de prueba para '$file'."
              echo "   Se esperaba encontrar:"
              echo "   - $UNIT_TEST_EXACT"
              echo "   - $FEATURE_TEST_EXACT"
              if [ -n "$UNIT_TEST_SIMPLE" ]; then
                echo "   - $UNIT_TEST_SIMPLE"
                echo "   - $FEATURE_TEST_SIMPLE"
              fi
              FAILED=true
            fi
          done

          if [ "$FAILED" = true ]; then
            echo "-------------------------------------------"
            echo "‚ùå El workflow fall√≥ porque uno o m√°s archivos de aplicaci√≥n no tienen una prueba correspondiente."
            echo "   Por favor, crea las pruebas para los archivos modificados antes de continuar."
            exit 1
          fi
          
          echo "‚úÖ Todos los archivos modificados tienen una prueba asociada."

      # 7. Paso 3: Configurar PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml, mysql, pdo_mysql
          coverage: xdebug

      # 8. Paso 4: Copiar archivo de entorno y configurar
      - name: Copy .env
        run: cp .env.example .env

      # 9. Paso 5: Instalar dependencias de Composer
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # 10. Paso 8: Ejecutar las pruebas
      - name: Execute Tests (PHPUnit & Pest)
        run: php artisan test